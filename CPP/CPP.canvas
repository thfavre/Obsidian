{
	"nodes":[
		{"id":"73130925f5996bed","x":-32,"y":-1280,"width":259,"height":52,"type":"text","text":"# Beginner Stuff"},
		{"id":"37a885987611c513","x":-1824,"y":-2054,"width":400,"height":243,"type":"text","text":"```CPP\n#include <iostream>\n```\nThe `#include` is a preprocessor directive used to include files in our program. The above code is including the contents of the **iostream** file.\nThis allows us to use `cout` in our program to print output on the screen."},
		{"id":"ebe0c9c8387271f2","x":-1386,"y":-1988,"width":460,"height":177,"type":"text","text":"```CPP\nstd::cout\n```\nA namespace is a declarative region inside which something is defined. So, in that case, **cout** is defined in the **std** namespace."},
		{"id":"12cb6377aad45ab6","x":-1344,"y":-1734,"width":375,"height":221,"type":"text","text":"## Hello World\n```CPP\n#include <iostream>\nint main()\n{\n\tstd::cout << \"Hello, World!\\n\";\n}\n```"},
		{"id":"fe8dc4c6308c045f","x":-1331,"y":-2354,"width":350,"height":226,"type":"text","text":"```CPP\n#include <iostream>\nusing namespace std;\n```\nWe ~are in the namespace std, that's why\n```CPP\ncout << \"GeeksforGeeks\";\n```\nis now valid. (But is not recommended)"},
		{"id":"cb83f8a660b7873f","x":-878,"y":-2014,"width":379,"height":203,"type":"text","text":"```CPP\nstd::cout << \"Hello, World!\\n\";\n```\nThe **operator** `<<` (‘‘put to’’) writes its second argument onto its first. In this case, the string literal `\"Hello, World!\\n\"` is written onto the standard output stream std::cout."},
		{"id":"3c8b6a115abad6dc","x":193,"y":-1727,"width":280,"height":50,"type":"text","text":"## Primitive Data Types"},
		{"id":"07580f6d5188e5fd","x":220,"y":-1604,"width":227,"height":60,"type":"text","text":"# Data Types"},
		{"id":"94f31a1054f4b1eb","x":-427,"y":-2544,"width":369,"height":186,"type":"text","text":"#### Get the min and max values\n```CPP\n#include <limits.h>\nint m = INT_MAX;\n```\nGives access to the min and max of all types. (ex. : `UINT_MAX`) "},
		{"id":"ec62a947d9e44667","x":-447,"y":-2224,"width":570,"height":420,"type":"text","text":"### Numerical Data Types\n- Short (`short`) : 2 bytes\n-  Integer  (`int`) : 4 bytes\n- Long (`short`) : 4 bytes\n\t(can be different on other computer but is at least the size of an `int`)\n- Long Long (`long long`) : 8 bytes\n\n- Float (`float`) : 4 bytes\n- Double (`double`) : 8 bytes\n\n\nAll of them are by default `signed` but can be changed to `unsigned`"},
		{"id":"36fec8cdccc41d37","x":140,"y":-2087,"width":387,"height":163,"type":"text","text":"### Textual Data Types\n- Character (`char`)  : 1 byte\n- String (`char *`) or (`std::string`) : 24 bytes\n\tex. : `std::string s = \"Hello World!\"`"},
		{"id":"4e53931587740d01","x":541,"y":-2107,"width":320,"height":203,"type":"text","text":"### Boolean\nCan be `true` or `false`\n- `true` is equal to 1.\n- `false` is equal to 0.\nIs 1 byte."},
		{"id":"67fd9f569818a1ee","x":1398,"y":-2259,"width":322,"height":205,"type":"text","text":"## Arithmetic Operators  \n- `*`\n- `/`\n- `-`\n- `%`"},
		{"id":"61d67c1ecfad71a3","x":1398,"y":-2024,"width":322,"height":256,"type":"text","text":"## Increment & Decrement\n- `x++` / `++x`\n- `x--` / `--x`\n```CPP\na = 10;\nstd::cout << a++  // prints 10\na = 10;\nstd::cout << ++a++  // prints 11\n```"},
		{"id":"102498b27c99a3a9","x":1398,"y":-1374,"width":322,"height":180,"type":"text","text":"## Logical Operators\n- **and** :  `&&`\n- **or** : `||`\n- **not** : `!`"},
		{"id":"ec11ae01b8593e0e","x":1000,"y":-2054,"width":220,"height":60,"type":"text","text":"# Operators"},
		{"id":"96b535376208dcf8","x":1398,"y":-1734,"width":322,"height":320,"type":"text","text":"## Comparaison Operators\n- `==`\n- `!=`\n- `<`\n- `>`\n- `<=`\n- `>=`\n\nThe results of a comparaison will be a boolean (1 or 0)."},
		{"id":"a77361777e07a0dc","x":-1460,"y":1000,"width":578,"height":430,"type":"text","text":"```ad-example\nblala\n~~~ad-quote\ntest\n~~~\n```"},
		{"id":"a0e03cc335fef2a3","x":-1107,"y":12,"width":250,"height":60,"type":"text","text":"# Techniacl Stuff"},
		{"id":"49fbd3d75bfe01ca","x":-1752,"y":111,"width":250,"height":115,"type":"text","text":"## Tips :\n- 1 byte = 8 bit"},
		{"id":"8672f2a9afd76a2d","x":-982,"y":222,"width":461,"height":564,"type":"text","text":"## Is a compiled language\nFor a program to run, its source text has to be processed by a compiler, producing object files, which are combined by a linker yielding an executable program.\n```mermaid\ngraph TD;\n    A[source file 1] --> |complie| B(object file 1);\n    AA[source file 2] --> |complie| BB(object file 2);\n    B & BB --> C{link};\n    C --> F[executable file];\n```"},
		{"id":"ed7451059c4fe0ea","x":-1383,"y":226,"width":378,"height":101,"type":"text","text":"## Is a statically typed language\nVariable types are known at compile time."},
		{"id":"af459245c8205719","x":-1171,"y":-453,"width":378,"height":131,"type":"text","text":"# Ressources\n- [Youtube : NeuralNine](https://youtube.com/playlist?list=PL7yh-TELLS1HSmBcqYk9LhPYSWp31FWH2)"},
		{"id":"384d32c2ea79945e","x":836,"y":1278,"width":328,"height":80,"type":"text","text":"# Differences with C"},
		{"id":"9d8a13417ad01f0e","x":910,"y":494,"width":386,"height":220,"type":"text","text":"## Functions overloading\n```CPP\nvoid print(int);\nvoid print(double);\n...\nprint(42); // calls print(int) \nprint(9.65); // calls print(double)\n```"},
		{"id":"039e507c430a79cc","x":1349,"y":494,"width":740,"height":353,"type":"text","text":"## Declaration\n```CPP\n1) int i1 = 7.2; // i1 becomes 7\n2) int i2 {7.2}; // error : floating-point to integer conversion \n3) int i3 = {7.2}; // error : floating-point to integer conversion (the = is redundant)\n```\n- Lines 1 and 3 work in C \n- Line 2 need a `=` in C to be working \nIn CPP the `int i4 {5}` is ===the best way=== to do to be sure that there is no conversion involved\n\n-> Prefer the {}-initializer syntax for declarations with a named type\n-> Prefer the = syntax for the initialization in declarations using auto;"},
		{"id":"1c53b70b6cec783e","x":728,"y":1800,"width":544,"height":272,"type":"text","text":"# Call by reference\n```CPP\nvoid func(int &x) {\n\tx++; \n}\nint main() {\nint a = 10;\nfunc(a);\n// a value is now 11\n}\n```"},
		{"id":"ebd1703b3ae652ab","x":33,"y":-322,"width":129,"height":75,"type":"text","text":"# CPP"},
		{"id":"4bd0ed525f62da33","x":556,"y":-1228,"width":416,"height":509,"type":"text","text":"# Functions\n~The same as C [[function]].\n## Difference :\n- ### Functions overloading\nIf two functions are defined with the same name, but with different argument types, the compiler will choose the most appropriate function to invoke for each call.\n```CPP\nvoid print(int);\nvoid print(double);\n...\nprint(42); // calls print(int) \nprint(9.65); // calls print(double)\n```\n"},
		{"id":"49c93736c82eb0ed","x":1360,"y":1816,"width":250,"height":240,"type":"text","text":"# Aliases\n```CPP\nint i1 = 10;\nint &integer1 = i1;\n```\nBoth variables modifies the same value (they have the same reference)"},
		{"id":"e9f0648ef83952f4","x":1398,"y":-754,"width":322,"height":260,"type":"text","text":"## Assignement Operators\n```CPP\nint a;\na = 20;\na += 10;\na *= 2;\na &= b\n...\n```"},
		{"id":"907517efab1e7f73","x":1398,"y":-1154,"width":602,"height":360,"type":"text","text":"## Bitwise Operators \n- **`&` (bitwise AND)** : takes two numbers as operands and does AND on every bit of two numbers. The result of AND is 1 only if both bits are 1.  \n- **`|` (bitwise OR)** takes two numbers as operands and does OR on every bit of two numbers. The result of OR is 1 if any of the two bits is 1. \n- **`^` (bitwise XOR)** takes two numbers as operands and does XOR on every bit of two numbers. The result of XOR is 1 if the two bits are different. \n- **`<<` (left shift)** takes two numbers, left shifts the bits of the first operand, the second operand decides the number of places to shift. \n- **`>>` (right shift)** takes two numbers, right shifts the bits of the first operand, the second operand decides the number of places to shift. \n- **`~` (bitwise NOT)** takes one number and inverts all bits of it."},
		{"id":"cb328d58990ad9d4","x":1905,"y":1708,"width":575,"height":250,"type":"text","text":"## `constexpr` keyword\nIs used to create compile-time constants and improve performance by eliminating the need for runtime computation.\n```CPP\nconstexpr int square(int x) { return x*x; } \nconstexpr int x = square(10); // x is a compile-time constant with a value of 100\n```\n"},
		{"id":"4e5f838a9a740eb8","x":1969,"y":860,"width":791,"height":780,"type":"text","text":"## `auto` keyword\n(Exists in C but not used)\n```CPP\nauto b = true; // a bool \nauto i = 123; // an int \nauto d = 1.2; // a double \nauto z = sqrt(y); // z has the type of whatever sqr t(y) returns\n```\nWith auto, we use the = because there is no potentially troublesome type conversion involved.\nIn general, `auto` can be useful when the type of a variable or function is complex or hard to deduce\n### Useful when :\n- Iterating over a container\n```CPP\nint v[] = {0,1,2,3,4,5,6,7,8,9}; \n\tfor (auto x : v) // for each x in v \n\t\tcout << x << '\\n';\n```\n- Templates: `auto` can be useful when working with templates, as it allows the compiler to deduce the types of template arguments, making the code more readable and less error-prone.\n```CPP\ntemplate<typename T>\n\tauto multiply(T a, T b) { return a * b; }\n```\n\n- Inference return type of function : When the return type of a function is complex or hard to deduce\n```CPP\nauto get_map() { \n\treturn std::map<std::string, int>{{\"key1\", 1}, {\"key2\", 2}}; }\n```\n"},
		{"id":"dbeef3683fe90c68","x":-360,"y":2560,"width":160,"height":60,"type":"text","text":"# Added"},
		{"id":"88cd59b35b3ba012","x":20,"y":1763,"width":458,"height":137,"type":"text","text":"# nullptr\n\nUse `nullptr` rather than `0` or `NULL`.\n"},
		{"id":"af46071c9f4cfcf7","x":-120,"y":2820,"width":515,"height":260,"type":"text","text":"# 2. User-Defined Types\nThe C++ abstraction mechanisms are primarily designed to let programmers design and implement their own types, with suitable representations and operations, and for programmers to simply and elegantly use such types.\n"}
	],
	"edges":[
		{"id":"6408cca2d20028f0","fromNode":"a0e03cc335fef2a3","fromSide":"bottom","toNode":"8672f2a9afd76a2d","toSide":"top"},
		{"id":"f395d080eaece690","fromNode":"a0e03cc335fef2a3","fromSide":"bottom","toNode":"ed7451059c4fe0ea","toSide":"top"},
		{"id":"d0994ecf7828d251","fromNode":"ebd1703b3ae652ab","fromSide":"left","toNode":"a0e03cc335fef2a3","toSide":"right"},
		{"id":"4a74112e7b03677e","fromNode":"ebd1703b3ae652ab","fromSide":"top","toNode":"73130925f5996bed","toSide":"bottom"},
		{"id":"1e81855f5e3f0225","fromNode":"73130925f5996bed","fromSide":"top","toNode":"12cb6377aad45ab6","toSide":"bottom"},
		{"id":"b3da142d68ca9612","fromNode":"12cb6377aad45ab6","fromSide":"top","toNode":"37a885987611c513","toSide":"bottom"},
		{"id":"5371e5e5f5f9fbd3","fromNode":"12cb6377aad45ab6","fromSide":"top","toNode":"ebe0c9c8387271f2","toSide":"bottom"},
		{"id":"0d41ac684edd18a7","fromNode":"ebe0c9c8387271f2","fromSide":"top","toNode":"fe8dc4c6308c045f","toSide":"bottom"},
		{"id":"27094e3cdf6c7e3d","fromNode":"12cb6377aad45ab6","fromSide":"top","toNode":"cb83f8a660b7873f","toSide":"bottom"},
		{"id":"78f23465f9592624","fromNode":"3c8b6a115abad6dc","fromSide":"top","toNode":"ec62a947d9e44667","toSide":"bottom"},
		{"id":"d5cd9232f3fa358b","fromNode":"a0e03cc335fef2a3","fromSide":"left","toNode":"49fbd3d75bfe01ca","toSide":"right"},
		{"id":"ca98d82d2604cf54","fromNode":"3c8b6a115abad6dc","fromSide":"top","toNode":"36fec8cdccc41d37","toSide":"bottom"},
		{"id":"f35c9ec3092e2684","fromNode":"ec62a947d9e44667","fromSide":"top","toNode":"94f31a1054f4b1eb","toSide":"bottom"},
		{"id":"8d4d53567c0e2493","fromNode":"3c8b6a115abad6dc","fromSide":"top","toNode":"4e53931587740d01","toSide":"bottom"},
		{"id":"ab83705dd5652092","fromNode":"ebd1703b3ae652ab","fromSide":"left","toNode":"af459245c8205719","toSide":"right"},
		{"id":"0fa38e8708c2e3c0","fromNode":"73130925f5996bed","fromSide":"right","toNode":"ec11ae01b8593e0e","toSide":"bottom"},
		{"id":"7828ef5d0c6cf27e","fromNode":"73130925f5996bed","fromSide":"top","toNode":"07580f6d5188e5fd","toSide":"bottom"},
		{"id":"2f7e27367ae22896","fromNode":"07580f6d5188e5fd","fromSide":"top","toNode":"3c8b6a115abad6dc","toSide":"bottom"},
		{"id":"109fdb7eb7476e50","fromNode":"ec11ae01b8593e0e","fromSide":"right","toNode":"67fd9f569818a1ee","toSide":"left"},
		{"id":"f51321f3eeddeb91","fromNode":"ec11ae01b8593e0e","fromSide":"right","toNode":"e9f0648ef83952f4","toSide":"left"},
		{"id":"ac9720ceb4693d09","fromNode":"ec11ae01b8593e0e","fromSide":"right","toNode":"61d67c1ecfad71a3","toSide":"left"},
		{"id":"fc1c77195b21e739","fromNode":"ec11ae01b8593e0e","fromSide":"right","toNode":"96b535376208dcf8","toSide":"left"},
		{"id":"fb71c42a1c3961b0","fromNode":"ec11ae01b8593e0e","fromSide":"right","toNode":"102498b27c99a3a9","toSide":"left"},
		{"id":"2b24e94758712b82","fromNode":"ec11ae01b8593e0e","fromSide":"right","toNode":"907517efab1e7f73","toSide":"left"},
		{"id":"4f0aff90bdcee71e","fromNode":"73130925f5996bed","fromSide":"right","toNode":"4bd0ed525f62da33","toSide":"left"},
		{"id":"d1c7a2207559986e","fromNode":"ebd1703b3ae652ab","fromSide":"bottom","toNode":"384d32c2ea79945e","toSide":"top"},
		{"id":"a2dc6e20fb44508b","fromNode":"384d32c2ea79945e","fromSide":"right","toNode":"9d8a13417ad01f0e","toSide":"bottom"},
		{"id":"eebe4a763d57fb2f","fromNode":"384d32c2ea79945e","fromSide":"right","toNode":"039e507c430a79cc","toSide":"bottom"},
		{"id":"84ee0fbd907fb058","fromNode":"384d32c2ea79945e","fromSide":"right","toNode":"4e5f838a9a740eb8","toSide":"left"},
		{"id":"48bfe0cee36e582a","fromNode":"384d32c2ea79945e","fromSide":"right","toNode":"cb328d58990ad9d4","toSide":"left"},
		{"id":"9366933a6fae9a8f","fromNode":"384d32c2ea79945e","fromSide":"bottom","toNode":"1c53b70b6cec783e","toSide":"top"},
		{"id":"2a48df18639e59a5","fromNode":"384d32c2ea79945e","fromSide":"bottom","toNode":"49c93736c82eb0ed","toSide":"top"},
		{"id":"80ff3f15d19d758b","fromNode":"1c53b70b6cec783e","fromSide":"right","toNode":"49c93736c82eb0ed","toSide":"left"},
		{"id":"43b1a7e91d0125e1","fromNode":"384d32c2ea79945e","fromSide":"bottom","toNode":"88cd59b35b3ba012","toSide":"top"}
	]
}