{
  "recentFiles": [
    {
      "basename": "input & output",
      "path": "C/input & output.md"
    },
    {
      "basename": "Attribute",
      "path": "The Web Developer Bootcamp 2023/HTML/Attribute.md"
    },
    {
      "basename": "Elements",
      "path": "The Web Developer Bootcamp 2023/HTML/Elements.md"
    },
    {
      "basename": "Emmet",
      "path": "The Web Developer Bootcamp 2023/HTML/Emmet.md"
    },
    {
      "basename": "Entities Codes",
      "path": "The Web Developer Bootcamp 2023/HTML/Entities Codes.md"
    },
    {
      "basename": "HTML",
      "path": "The Web Developer Bootcamp 2023/HTML/HTML.md"
    },
    {
      "basename": "Skeleton",
      "path": "The Web Developer Bootcamp 2023/HTML/Skeleton.md"
    },
    {
      "basename": "Back End",
      "path": "The Web Developer Bootcamp 2023/Back End.md"
    },
    {
      "basename": "Front End",
      "path": "The Web Developer Bootcamp 2023/Front End.md"
    },
    {
      "basename": "CSS",
      "path": "The Web Developer Bootcamp 2023/CSS/CSS.md"
    },
    {
      "basename": "Javascript",
      "path": "The Web Developer Bootcamp 2023/Javascript/Javascript.md"
    },
    {
      "basename": "typedef",
      "path": "C/typedef.md"
    },
    {
      "basename": "string",
      "path": "C/string.md"
    },
    {
      "basename": "recursivity",
      "path": "C/recursivity.md"
    },
    {
      "basename": "run code",
      "path": "C/run code.md"
    },
    {
      "basename": "memory adress",
      "path": "C/memory adress.md"
    },
    {
      "basename": "main",
      "path": "C/main.md"
    },
    {
      "basename": "if else elif endif if defined",
      "path": "C/if else elif endif if defined.md"
    },
    {
      "basename": "debbuger",
      "path": "C/debbuger.md"
    },
    {
      "basename": "compilation",
      "path": "C/compilation.md"
    },
    {
      "basename": "README",
      "path": "README.md"
    },
    {
      "basename": "Obsidian Tips",
      "path": "Obsidian Tips.md"
    },
    {
      "basename": "array",
      "path": "C/array.md"
    },
    {
      "basename": "vocabulary",
      "path": "C/vocabulary.md"
    },
    {
      "basename": "variable",
      "path": "C/variable.md"
    },
    {
      "basename": "union",
      "path": "C/union.md"
    },
    {
      "basename": "structure",
      "path": "C/structure.md"
    },
    {
      "basename": "static variable",
      "path": "C/static variable.md"
    },
    {
      "basename": "preprocessor directive",
      "path": "C/preprocessor directive.md"
    },
    {
      "basename": "pointer",
      "path": "C/pointer.md"
    },
    {
      "basename": "malloc",
      "path": "C/malloc.md"
    },
    {
      "basename": "makefile",
      "path": "C/makefile.md"
    },
    {
      "basename": "loop",
      "path": "C/loop.md"
    },
    {
      "basename": "library",
      "path": "C/library.md"
    },
    {
      "basename": "include",
      "path": "C/include.md"
    },
    {
      "basename": "ifdef ifndef",
      "path": "C/ifdef ifndef.md"
    },
    {
      "basename": "Heap, maloc, free",
      "path": "C/Heap, maloc, free.md"
    },
    {
      "basename": "header file",
      "path": "C/header file.md"
    },
    {
      "basename": "function",
      "path": "C/function.md"
    },
    {
      "basename": "enumeration",
      "path": "C/enumeration.md"
    },
    {
      "basename": "define",
      "path": "C/define.md"
    },
    {
      "basename": "data structure",
      "path": "C/data structure.md"
    },
    {
      "basename": "constant",
      "path": "C/constant.md"
    },
    {
      "basename": "condition",
      "path": "C/condition.md"
    }
  ],
  "omittedPaths": [],
  "maxLength": null,
  "openType": "tab"
}