{
  "categories": {
    "Flowchart": "Flowchart",
    "SequenceDiagram": "SequenceDiagram",
    "ClassDiagram": "ClassDiagram",
    "StateDiagram": "StateDiagram",
    "EntityRelationshipDiagram": "EntityRelationshipDiagram",
    "UserJourneyDiagram": "UserJourneyDiagram",
    "GanttChart": "GanttChart",
    "PieChart": "PieChart",
    "RequirementDiagram": "RequirementDiagram",
    "GitGraph": "GitGraph"
  },
  "elements": [
    {
      "category": "Flowchart",
      "description": "a simple flowchart with top to down direction",
      "content": "flowchart TD\nStart --> Stop",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "category": "Flowchart",
      "description": "a simple flowchart with left to right direction",
      "content": "flowchart LR\nStart --> Stop",
      "sortingOrder": 2,
      "isPinned": false
    },
    {
      "category": "Flowchart",
      "description": "A node with round edges",
      "content": "id1(Some text)",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "category": "Flowchart",
      "description": "A stadium-shaped node",
      "content": "id1([Some text])",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "category": "Flowchart",
      "description": "A node in a cylindrical shape",
      "content": "id1[(Database)]",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "category": "Flowchart",
      "description": "A node in the form of a circle",
      "content": "id1((Some text))",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "category": "Flowchart",
      "description": "A node (rhombus)",
      "content": "id1{Some text}",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "category": "Flowchart",
      "description": "A link with arrow head",
      "content": "A-->B",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "category": "Flowchart",
      "description": "An open link",
      "content": "A --- B",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "category": "Flowchart",
      "description": "Text on links",
      "content": "A-- This is the text! ---B",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "category": "Flowchart",
      "description": "A link with arrow head and text",
      "content": "A-->|text|B",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "category": "Flowchart",
      "description": "Dotted link",
      "content": "A-.->B",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "category": "Flowchart",
      "description": "Thick link",
      "content": "A ==> B",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "category": "Flowchart",
      "description": "Subgraph",
      "content": "subgraph one\na1-->a2\nend",
      "sortingOrder": 3,
      "isPinned": false
    },
    {
      "category": "SequenceDiagram",
      "description": "a simple sequence diagram",
      "content": "sequenceDiagram\nAlice->>John: Hello John, how are you?\nJohn-->>Alice: Great!\nAlice-)John: See you later!",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "category": "SequenceDiagram",
      "description": "a simple sequence diagram with actors",
      "content": "sequenceDiagram\nactor Alice\nactor John\nAlice->>John: Hello John, how are you?\nJohn-->>Alice: Great!\nAlice-)John: See you later!",
      "sortingOrder": 1,
      "isPinned": false
    },
    {
      "category": "ClassDiagram",
      "description": "sample class",
      "content": "class Duck{\n            +String beakColor\n            +swim()\n            +quack()\n        }",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "ClassDiagram",
      "description": "sample class",
      "content": "class BankAccount\n        BankAccount : +String owner\n        BankAccount : +Bigdecimal balance\n        BankAccount : +deposit(amount)\n        BankAccount : +withdrawal(amount)",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "ClassDiagram",
      "description": "generic class",
      "content": "class Square~Shape~{\n            int id\n            List~int~ position\n            setPoints(List~int~ points)\n            getPoints() List~int~\n        }\n        \n        Square : -List~string~ messages\n        Square : +setMessages(List~string~ messages)\n        Square : +getMessages() List~string~",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "ClassDiagram",
      "description": "inheritance",
      "content": "classA <|-- classB",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "ClassDiagram",
      "description": "composition",
      "content": "classC *-- classD",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "ClassDiagram",
      "description": "aggregation",
      "content": "classE o-- classF",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "ClassDiagram",
      "description": "association",
      "content": "classG <-- classH",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "ClassDiagram",
      "description": "solid link",
      "content": "classI -- classJ",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "ClassDiagram",
      "description": "dependency",
      "content": "classK <.. classL",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "ClassDiagram",
      "description": "realization",
      "content": "classM <|.. classN",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "ClassDiagram",
      "description": "dashed link",
      "content": "classO .. classP",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "ClassDiagram",
      "description": "two-way relation",
      "content": "Animal <|--|> Zebra",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "ClassDiagram",
      "description": "sample class diagram",
      "content": "classDiagram\n        Animal <|-- Duck\n        Animal <|-- Fish\n        Animal <|-- Zebra\n        Animal : +int age\n        Animal : +String gender\n        Animal: +isMammal()\n        Animal: +mate()\n        class Duck{\n            +String beakColor\n            +swim()\n            +quack()\n        }\n        class Fish{\n            -int sizeInFeet\n            -canEat()\n        }\n        class Zebra{\n            +bool is_wild\n            +run()\n        }",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "StateDiagram",
      "description": "a sample state diagram",
      "content": "stateDiagram-v2\n        [*] --> Still\n        Still --> [*]\n    \n        Still --> Moving\n        Moving --> Still\n        Moving --> Crash\n        Crash --> [*]",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "StateDiagram",
      "description": "a sample state diagram with left-to-right direction",
      "content": "stateDiagram-v2\n        direction LR\n        [*] --> Still\n        Still --> [*]\n    \n        Still --> Moving\n        Moving --> Still\n        Moving --> Crash\n        Crash --> [*]",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "StateDiagram",
      "description": "node with description",
      "content": "s2 : This is a state description",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "StateDiagram",
      "description": "a transition",
      "content": "s1 --> s2",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "StateDiagram",
      "description": "a transition with label",
      "content": "s1 --> s2: A transition",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "StateDiagram",
      "description": "composite state",
      "content": "\n        [*] --> First\n        state First {\n            [*] --> second\n            second --> [*]\n        }",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "StateDiagram",
      "description": "diagram with choice",
      "content": "stateDiagram-v2\n        state if_state <<choice>>\n        [*] --> IsPositive\n        IsPositive --> if_state\n        if_state --> False: if n < 0\n        if_state --> True : if n >= 0",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "StateDiagram",
      "description": "diagram with fork",
      "content": "stateDiagram-v2\n        state fork_state <<fork>>\n          [*] --> fork_state\n          fork_state --> State2\n          fork_state --> State3\n    \n          state join_state <<join>>\n          State2 --> join_state\n          State3 --> join_state\n          join_state --> State4\n          State4 --> [*]",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "StateDiagram",
      "description": "a diagram with concurrency",
      "content": "stateDiagram-v2\n        [*] --> Active\n    \n        state Active {\n            [*] --> NumLockOff\n            NumLockOff --> NumLockOn : EvNumLockPressed\n            NumLockOn --> NumLockOff : EvNumLockPressed\n            --\n            [*] --> CapsLockOff\n            CapsLockOff --> CapsLockOn : EvCapsLockPressed\n            CapsLockOn --> CapsLockOff : EvCapsLockPressed\n            --\n            [*] --> ScrollLockOff\n            ScrollLockOff --> ScrollLockOn : EvScrollLockPressed\n            ScrollLockOn --> ScrollLockOff : EvScrollLockPressed\n        }",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "EntityRelationshipDiagram",
      "description": "a sample entity relationship diagram",
      "content": "erDiagram\n        CUSTOMER ||--o{ ORDER : places\n        ORDER ||--|{ LINE-ITEM : contains\n        CUSTOMER }|..|{ DELIVERY-ADDRESS : uses",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "EntityRelationshipDiagram",
      "description": "an entity",
      "content": "    CUSTOMER {\n            string name\n            string custNumber\n            string sector\n        }",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "EntityRelationshipDiagram",
      "description": "one-to-many relationship",
      "content": "A ||--|{ B : label",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "EntityRelationshipDiagram",
      "description": "many-to-many relationship",
      "content": "A }|--|{ B : label",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "EntityRelationshipDiagram",
      "description": "one-to-one relationship",
      "content": "A ||--|| B : label",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "EntityRelationshipDiagram",
      "description": "many-to-one relationship",
      "content": "A }|--|| B : label",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "EntityRelationshipDiagram",
      "description": "zero/one-to-one relationship",
      "content": "A |o--|| B : label",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "EntityRelationshipDiagram",
      "description": "one-to-one/zero relationship",
      "content": "A ||--o| B : label",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "EntityRelationshipDiagram",
      "description": "zero-or-more-to-one relationship",
      "content": "A }o--|| B : label",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "EntityRelationshipDiagram",
      "description": "one-to-zero-or-more relationship",
      "content": "A ||--o{ B : label",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "EntityRelationshipDiagram",
      "description": "zero-or-more-to-many relationship",
      "content": "A }o--|{ B : label",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "EntityRelationshipDiagram",
      "description": "many-to-zero-or-more relationship",
      "content": "A }|--o{ B : label",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "UserJourneyDiagram",
      "description": "a sample user journey diagram",
      "content": "journey\n        title My working day\n        section Go to work\n          Make tea: 5: Me\n          Go upstairs: 3: Me\n          Do work: 1: Me, Cat\n        section Go home\n          Go downstairs: 5: Me\n          Sit down: 5: Me",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "UserJourneyDiagram",
      "description": "a step in user journey",
      "content": "      Step Title: 5: ActorName",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "GanttChart",
      "description": "simple gantt chart",
      "content": "gantt\n        title A Gantt Diagram\n        dateFormat  YYYY-MM-DD\n        section Section\n        A task           :a1, 2014-01-01, 30d\n        Another task     :after a1  , 20d\n        section Another\n        Task in sec      :2014-01-12  , 12d\n        another task      : 24d",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "GanttChart",
      "description": "rich gantt chart",
      "content": "gantt\n        dateFormat  YYYY-MM-DD\n        title       Adding GANTT diagram functionality to mermaid\n        excludes    weekends\n    \n        section A section\n        Completed task            :done,    des1, 2014-01-06,2014-01-08\n        Active task               :active,  des2, 2014-01-09, 3d\n        Future task               :         des3, after des2, 5d\n        Future task2              :         des4, after des3, 5d\n    \n        section Critical tasks\n        Completed task in the critical line :crit, done, 2014-01-06,24h\n        Implement parser and jison          :crit, done, after des1, 2d\n        Create tests for parser             :crit, active, 3d\n        Future task in critical line        :crit, 5d\n        Create tests for renderer           :2d\n        Add to mermaid                      :1d\n        Functionality added                 :milestone, 2014-01-25, 0d\n    \n        section Documentation\n        Describe gantt syntax               :active, a1, after des1, 3d\n        Add gantt diagram to demo page      :after a1  , 20h\n        Add another diagram to demo page    :doc1, after a1  , 48h\n    \n        section Last section\n        Describe gantt syntax               :after doc1, 3d\n        Add gantt diagram to demo page      :20h\n        Add another diagram to demo page    :48h",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "GanttChart",
      "description": "milestones example",
      "content": "gantt\n        dateFormat HH:mm\n        axisFormat %H:%M\n        Initial milestone : milestone, m1, 17:49,2min\n        taska2 : 10min\n        taska3 : 5min\n        Final milestone : milestone, m2, 18:14, 2min",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "PieChart",
      "description": "sample pie chart",
      "content": "pie title /r/obsidianmd posts by type\n        \"Look at my awesome graph\" : 85\n        \"Look at my cool dashboard\" : 14\n        \"Moved from Notion, liking it\" : 1",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "PieChart",
      "description": "sample pie chart with values shown in legend",
      "content": "pie showdata\n        title /r/obsidianmd posts by type\n        \"Graphs\" : 85\n        \"Dashboards\" : 14\n        \"Tips\" : 1",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "RequirementDiagram",
      "description": "sample requirements diagram",
      "content": "    requirementDiagram\n\n        requirement test_req {\n        id: 1\n        text: the test text.\n        risk: high\n        verifymethod: test\n        }\n    \n        element test_entity {\n        type: simulation\n        }\n    \n        test_entity - satisfies -> test_req",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "RequirementDiagram",
      "description": "sample requirements diagram",
      "content": "element customElement {\n            type: customType\n            docref: customDocRef\n        }",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "RequirementDiagram",
      "description": "a requirement with high risk",
      "content": "functionalRequirement myReq {\n            id: reqId\n            text: someText\n            risk: High\n            verifymethod: analysis\n        }",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "RequirementDiagram",
      "description": "sample requirements diagram",
      "content": "interfaceRequirement myReq2 {\n            id: reqId\n            text: someText\n            risk: Medium\n            verifymethod: demonstration\n        }",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "RequirementDiagram",
      "description": "sample requirements diagram",
      "content": "designConstraint myReq3 {\n            id: reqId\n            text: someText\n            risk: Low\n            verifymethod: test\n        }",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "GitGraph",
      "description": "simple git graph",
      "content": "gitGraph\n        commit\n        commit\n        branch develop\n        checkout develop\n        commit\n        commit\n        checkout main\n        merge develop\n        commit\n        commit",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "GitGraph",
      "description": "tagged commit",
      "content": "commit id: \"Normal\" tag: \"v1.0.0\"",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "GitGraph",
      "description": "reverse commit",
      "content": "commit id: \"Reverse\" type: REVERSE",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "GitGraph",
      "description": "highlighted commit",
      "content": "commit id: \"Highlight\" type: HIGHLIGHT",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "GitGraph",
      "description": "reverse commit",
      "content": "commit id: \"Reverse\" type: REVERSE",
      "sortingOrder": 0,
      "isPinned": false
    },
    {
      "category": "GitGraph",
      "description": "git graph with cherry-pick",
      "content": "gitGraph\n        commit id: \"ZERO\"\n        branch develop\n        commit id:\"A\"\n        checkout main\n        commit id:\"ONE\"\n        checkout develop\n        commit id:\"B\"\n        checkout main\n        commit id:\"TWO\"\n        cherry-pick id:\"A\"\n        commit id:\"THREE\"\n        checkout develop\n        commit id:\"C\"",
      "sortingOrder": 0,
      "isPinned": false
    }
  ],
  "selectedCategory": "Flowchart"
}